{"version":3,"sources":["../diff.js"],"names":["REMOVE","PROPS","REPLACE","INSERT","TEXT","diffNode","oldNode","newNode","name","propsDiff","oldProps","props","newProps","Object","keys","filter","prop","startsWith","forEach","key","hasOwnProperty","oldStyle","style","newStyle","styleDiff","forOwn","value","isEmptyObject","length","diffTree","oldTree","newTree","result","path","dfsDiff","tree1","tree2","rootPath","differenec","push","diffType","includes","children1","children","children2","maxChildCount","Math","max","i"],"mappings":"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","file":"diff.7fa52a17.map","sourceRoot":"../example","sourcesContent":["const REMOVE = 1\nconst PROPS = 2\nconst REPLACE = 3\nconst INSERT = 4\nconst TEXT = 5\n\n/**\n * diff 两个VNode之间的差异并返回，不递归diff子节点\n * @param {VNode} oldNode \n * @param {VNode} newNode \n */\nconst diffNode = (oldNode, newNode) => {\n  if (typeof oldNode === 'string' && typeof newNode === 'string'){\n    if (oldNode !== newNode) {\n      return [TEXT, newNode]\n    }\n    return false\n  }\n\n  if (oldNode.name !== newNode.name) {\n    return [REPLACE, newNode]\n  }\n\n  const propsDiff = {}\n\n  const oldProps = oldNode.props\n  const newProps = newNode.props\n\n  // 认为事件绑定函数不会改变\n  // 插入和修改prop\n  Object.keys(newProps)\n    .filter(prop => !prop.startsWith('on'))\n    .forEach(key => {\n      if (oldProps.hasOwnProperty(key)) {\n        // 对于style特殊处理\n        if (key === 'style') {\n          const oldStyle = oldProps.style\n          const newStyle = newProps.style\n          const styleDiff = {}\n\n          forOwn(newStyle, (key, value) => {\n            if (oldStyle.hasOwnProperty(key)) {\n              if (oldStyle[key] !== value) {\n                styleDiff[key] = [REPLACE, value]\n              }\n            } else {\n              styleDiff[key] = [INSERT, value]\n            }\n          })\n\n          forOwn(oldStyle, (key, value) => {\n            if (!newStyle.hasOwnProperty(key)) {\n              styleDiff[key] = [REMOVE]\n            }\n          })\n          \n          if (!isEmptyObject(styleDiff)) {\n            propsDiff.style = styleDiff\n          }\n        } else if(oldProps[key] !== newProps[key]) {\n          propsDiff[key] = [REPLACE, newProps[key]]\n        }\n      } else {\n        propsDiff[key] = [INSERT, newProps[key]]\n      }\n    })\n\n  // 删除prop\n  Object.keys(oldProps)\n    .filter(prop => !prop.startsWith('on'))\n    .forEach(key => {\n      if (!newProps.hasOwnProperty(key)) {\n        propsDiff[key] = [REMOVE]\n      }\n    })\n\n  if (Object.keys(propsDiff).length === 0) return false\n\n  return [2, propsDiff]\n}\n\nconst diffTree = (oldTree, newTree) => {\n  const result = []\n  let path = 0\n\n  // 同步dfs两个树，需要注意保持同步\n  // 已经有过经验了，递归dfs快于手动堆栈\n  const dfsDiff = (tree1, tree2) => {\n    path++\n    const rootPath = path\n    const differenec = diffNode(tree1, tree2)\n    if (differenec) result.push([path, ...differenec])\n\n    const diffType = differenec[0]\n    // 如果是替换或者文本节点，不用递归往下\n    if ([REPLACE, TEXT].includes(diffType) || typeof tree1 === 'string') return\n\n    const children1 = [...tree1.children]\n    const children2 = [...tree2.children]\n    const maxChildCount = Math.max(children1.length, children2.length)\n    for(let i = 0; i < maxChildCount; i++) {\n      // 插入\n      if (i > children1.length - 1) {\n        // 注意插入这里要使用父节点的path\n        result.push([rootPath, INSERT, children2[i]])\n        continue\n      }\n      // 删除\n      if (i > children2.length - 1) {\n        path++\n        result.push([path, REMOVE, children1[i]])\n        continue\n      }\n\n      dfsDiff(children1[i], children2[i])\n    }\n  }\n\n  dfsDiff(oldTree, newTree)\n\n  return result\n}"]}